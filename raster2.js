/*

  Builds on raster.js, this time drawing to a CANVAS element.
  Requires calling .bake() to blit imageData back to canvas.

 */


(function() {
  'use strict';


  function rgba2hex(r, g, b, a) {
    return (
      (r << 24) +
      (g << 16) +
      (b <<  8) +
       a
    );
  }

  function hex2rgba(h) {
    return [
      (h >> 24) & 255, // R
      (h >> 16) & 255, // G
      (h >>  8) & 255, // B
       h        & 255  // A
    ];
  }



  window.getRasterCanvas = function(canvasEl) {
    const W = canvasEl.width;
    const H = canvasEl.height;
    const ctx = canvasEl.getContext('2d');
    const id = ctx.getImageData(0, 0, W, H);

    const setPixel = function(x, y, c) {
      if (x < 0 || y < 0 || x >= W || y >= H) { return; }
      const channels = hex2rgba(c);
      //console.log(channels);
      let i = (W * y + x) * 4;
      id.data[i++] = channels[0];
      id.data[i++] = channels[1];
      id.data[i++] = channels[2];
      id.data[i  ] = channels[3];
    };

    const getPixel = function(x, y) {
      let i = (W * y + x) * 4;
      const r = id.data[i++];
      const g = id.data[i++];
      const b = id.data[i++];
      const a = id.data[i  ];
      const h = rgba2hex(r, g, b, a);
      return h;
    }

    const strokes = {
      1: [
        [0, 0]
      ],
      2: [
        [0, -1],
        [-1, 0], [0, 0], [1, 0],
        [0, 1]
      ],
      4: [
        [-1,-2], [0,-2], [1,-2],
        [-2,-1], [-1,-1], [0,-1], [1,-1], [2, -1],
        [-2,0], [-1,0], [0,0], [1,0], [2, 0],
        [-2,1], [-1,1], [0,1], [1,1], [2, 1],
        [-1,2], [0,2], [1,2]
      ],
      6: [
        [-1,-3], [0,-3], [1,-3],
        [-2,-2], [-1,-2], [0,-2], [1,-2], [2,-2],
        [-3,-1], [-2,-1], [-1,-1], [0,-1], [1,-1], [2,-1], [3,-1],
        [-3,0], [-2,0], [-1,0], [0,0], [1,0], [2,0], [3,0],
        [-3,1], [-2,1], [-1,1], [0,1], [1,1], [2,1], [3,1],
        [-2,2], [-1,2], [0,2], [1,2], [2,2],
        [-1,3], [0,3], [1,3]
      ],
      8: [
        [-2,-4], [-1,-4], [0,-4], [1,-4], [2,-4],
        [-3,-3], [-2,-3], [-1,-3], [0,-3], [1,-3], [2,-3], [3,-3],
        [-4,-2], [-3,-2], [-2,-2], [-1,-2], [0,-2], [1,-2], [2,-2], [3,-2], [4,-2],
        [-4,-1], [-3,-1], [-2,-1], [-1,-1], [0,-1], [1,-1], [2,-1], [3,-1], [4,-1],
        [-4,0], [-3,0], [-2,0], [-1,0], [0,0], [1,0], [2,0], [3,0], [4,0],
        [-4,1], [-3,1], [-2,1], [-1,1], [0,1], [1,1], [2,1], [3,1], [4,1],
        [-4,2], [-3,2], [-2,2], [-1,2], [0,2], [1,2], [2,2], [3,2], [4,2],
        [-3,3], [-2,3], [-1,3], [0,3], [1,3], [2,3], [3,3],
        [-2,4], [-1,4], [0,4], [1,4], [2,4]
      ],
      10: [
        [-2,-5], [-1,-5], [0,-5], [1,-5], [2,-5],
        [-3,-4], [-2,-4], [-1,-4], [0,-4], [1,-4], [2,-4], [3,-4],
        [-4,-3], [-3,-3], [-2,-3], [-1,-3], [0,-3], [1,-3], [2,-3], [3,-3], [4,-3],
        [-5,-2], [-4,-2], [-3,-2], [-2,-2], [-1,-2], [0,-2], [1,-2], [2,-2], [3,-2], [4,-2], [5,-2],
        [-5,-1], [-4,-1], [-3,-1], [-2,-1], [-1,-1], [0,-1], [1,-1], [2,-1], [3,-1], [4,-1], [5,-1],
        [-5,0], [-4,0], [-3,0], [-2,0], [-1,0], [0,0], [1,0], [2,0], [3,0], [4,0], [5,0],
        [-5,1], [-4,1], [-3,1], [-2,1], [-1,1], [0,1], [1,1], [2,1], [3,1], [4,1], [5,1],
        [-5,2], [-4,2], [-3,2], [-2,2], [-1,2], [0,2], [1,2], [2,2], [3,2], [4,2], [5,2],
        [-4,3], [-3,3], [-2,3], [-1,3], [0,3], [1,3], [2,3], [3,3], [4,3],
        [-3,4], [-2,4], [-1,4], [0,4], [1,4], [2,4], [3,4],
        [-2,5], [-1,5], [0,5], [1,5], [2,5]
      ]
    };

    let currentStroke = strokes[1];

    const setStroke = function(n) {
      currentStroke = strokes[n];
    }

    const setPixel2 = function(x, y, c) {
      currentStroke.forEach(function(p) {
        setPixel(x+p[0], y+p[1], c);
      });
    }

    const api = window.getRaster(setPixel2);

    api.setStroke = setStroke;
    api.getPixel = getPixel;
    api.setPixel = setPixel;

    api.bake = function() {
      ctx.putImageData(id ,0, 0);
    };

    return api;
  };

})();
